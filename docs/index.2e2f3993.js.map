{"mappings":"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AAI,IAAI,IAAI,IAAI,KAIpBC,QAAU,CACN,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAC1C,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MACvD,MAAM,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OACnE,IAAI,KAAK,MAAM,OAAO,QACtB,GAAG,GAAG,GAAG,GAAG,GACZ,GAAG,GAAG,GAAG,GAAG,KAMpBf,MAAa,CACTC,UAAW,KACXC,SAAU,KACVC,YAAa,KACbC,SAAU,MACVY,MAAO,IAGXhB,MAAa,CACTC,UAAS,QACTC,SAAQ,QACRC,YAAW,QACXC,SAAQ,QACRY,MAAK,WACLR,SAAQ,YAUZR,UAAiB,CACbiB,QAAU,CACN,IAAM,YACN,IAAM,WACN,IAAM,YACN,IAAK,cAGTC,OAAS,CACL,CAAC,IAAK,cACN,CAAC,IAAK,cACN,CAAC,IAAK,cACN,CAAC,IAAK,gBAKdlB,UAAiB,CACb,YACkB,YACA,aACE,QACV,WACM,cACM,WACN,eACQ,UACV,WACE,aACI,WACJ,QACN,UACI,WACE,gBACU,QAChB,WACM,YACE,aACE,WACJ,WACA,QACN,OACF,YACU,SACN,YACM,WACF,WACA,QACN,SACE,YACM,aACE,OACZ,UACM,WACE,YACE,SACN,eACY,WACR,WACA,WACA,QACN,eACc,YACN,SACN,aACQ,cACE,SACV,cACU,eACE,UACV,SACF,QACF,cACY,aACF,WACJ,aACI,WACJ,WACA,WACA,UACF,YACI,UACJ,WACE,QACN,SACE,WACI,aACI,UACN,YACI,UACJ,SACF,SACA,WACI,gBACU,aACN,UACN,YACI,QACR,QACA,QACA,aACU,YACF,UACJ,UACA,WACE,SACJ,UACE,YACI,WACF,QACN,UACI,YACI,WACF,UACF,QACJ,YACQ,YACA,UAGtBA,OAAc,CACV,QACU,SACE,WACI,QACN,SACE,SACA,UACE,QACJ,OACF,SACI,QACF,UACI,QACJ,UACI,eACU,SACZ,WACI,UACF,OACN,SACI,QACF,SACE,QACF,QACA,SACE,QACF,OACF,UACM,QACJ,QACA,OACF,QACE,OACF,QACE,SACE,SACA,SACA,WACI,SACJ,UACE,QACJ,QACA,OACF,OACA,OACA,SACI,SACA,SACA,QACF,QACA,QACA,OACF,SACI,SACA,OACJ,SACI,SACA,OACJ,WACQ,WACA,OACR,SACI,OACJ,OACA,QACE,WACM,QACN,SACE,QACF,UACI,WACE,SACJ,UACE,QACJ,OACF,QACE,QACA,OACF,WACQ,OACR,SACI,QACF,QACA,SACE,WACI,UACF,QACJ,QACA,UACI,YACI,QACR,eACc,OAChB,UACM,UACA,SACF,SACA,mBACoB,QACtB,QAGdA,OAAc,CACV,YACkB,UACJ,QACJ,UACI,SACF,YACM,aACE,UACN,SACF,QACF,SACE,QACF,WACM,UACF,QACJ,aACU,UACN,WACE,WACA,UACF,WACE,QACN,gBACgB,QAChB,UACI,QACJ,aACU,WACJ,UACF,cACQ,iBACM,YACV,aACE,YACF,cACI,cACA,YACJ,cACI,YACJ,cACI,aACF,cACE,YACJ,cACI,cACA,eACE,cACF,cACA,YACJ,cACI,eACE,cACF,cACA,eACE,kBACM,cACR,cACA,cACA,cACA,UACR,UACA,UACA,WACE,YACE,YACA,aACE,SACR,WACI,UACF,YACI,aACE,SACR,UACE,SACF,YACM,YACA,YACA,YACA,SACN,WACI,WACA,WACA,UACF,UACA,UACA,YACI,WACF,YACE,UACJ,WACE,WACA,cACM,SACV,aACQ,UACN,WACE,UACF,wBAC4B,sBACJ,yBAG1CmB,EAAenB,ECxgBR,MAAMoB,EAAmBC,IAC5B,IAAIC,EAAU,CACV,WAAA,YACgB,cAAA,cACM,UAAA,WACR,WAAA,WACE,SAAA,WACJ,cAAA,gBACU,eAAA,eACE,YAAA,YACN,aAAA,WACE,WAAA,SACJ,WAAA,WACA,WAAA,QACA,UAAA,WACF,cAAA,WACQ,SAAA,SACV,SAAA,SACA,eAAA,SACY,MAAA,WAClB,MAAA,OAGVC,OAAOC,KAAKF,GAASG,SAAQ,SAAUC,GAC/BA,GA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","sources":["node_modules/anbani/src/lib/data.mjs","node_modules/anbani/src/lib/utils.mjs","node_modules/anbani/src/lib/core.mjs","node_modules/anbani/src/lib/lorem.mjs","node_modules/anbani/src/lib/toolkit.mjs","node_modules/anbani/src/anbani.mjs","src/app.js"],"sourcesContent":["const data = {};\n\ndata.alphabets = {\n    // Modern unicameral Georgian script developed in 10th century \n    mkhedruli : [\n        'ა','ბ','გ','დ','ე','ვ','ზ','თ','ი','კ','ლ',\n        'მ','ნ','ო','პ','ჟ','რ','ს','ტ','უ','ფ','ქ',\n        'ღ','ყ','შ','ჩ','ც','ძ','წ','ჭ','ხ','ჯ','ჰ',\n        'ჱ','ჲ','ჳ','ჴ','ჵ',\n        'ჶ','ჷ','ჸ','ჹ','ჺ',\n        '჻','ჼ','ჽ','ჾ','ჿ',\n    ],\n\n    // Modern unicameral derivative script of Mkhedruli only used for headlines in all-caps\n    mtavruli : [\n        'Ა','Ბ','Გ','Დ','Ე','Ვ','Ზ','Თ','Ი','Კ','Ლ',\n        'Მ','Ნ','Ო','Პ','Ჟ','Რ','Ს','Ტ','Უ','Ფ','Ქ',\n        'Ღ','Ყ','Შ','Ჩ','Ც','Ძ','Წ','Ჭ','Ხ','Ჯ','Ჰ',\n        'Ჱ','Ჲ','Ჳ','Ჴ','Ჵ',\n        'Ჶ','Ჷ','Ჸ','Ჹ','Ჺ',\n        '᲻','᲼','Ჽ','Ჾ','Ჿ',\n    ],\n\n    // Original Georgian alphabet from 5th century\n    asomtavruli : [\n        'Ⴀ','Ⴁ','Ⴂ','Ⴃ','Ⴄ','Ⴅ','Ⴆ','Ⴇ','Ⴈ','Ⴉ','Ⴊ',\n        'Ⴋ','Ⴌ','Ⴍ','Ⴎ','Ⴏ','Ⴐ','Ⴑ','Ⴒ','Ⴓ','Ⴔ','Ⴕ',\n        'Ⴖ','Ⴗ','Ⴘ','Ⴙ','Ⴚ','Ⴛ','Ⴜ','Ⴝ','Ⴞ','Ⴟ','Ⴠ',\n        'Ⴡ','Ⴢ','Ⴣ','Ⴤ','Ⴥ',\n        '჆','Ⴧ','჈','჉','჊',\n        '჋','჌','Ⴭ','჎','჏',\n    ],\n\n    // Second script of Georgian alphabet first appearing in 9th century\n    nuskhuri : [\n        'ⴀ','ⴁ','ⴂ','ⴃ','ⴄ','ⴅ','ⴆ','ⴇ','ⴈ','ⴉ','ⴊ',\n        'ⴋ','ⴌ','ⴍ','ⴎ','ⴏ','ⴐ','ⴑ','ⴒ','ⴓ','ⴔ','ⴕ',\n        'ⴖ','ⴗ','ⴘ','ⴙ','ⴚ','ⴛ','ⴜ','ⴝ','ⴞ','ⴟ','ⴠ',\n        'ⴡ','ⴢ','ⴣ','ⴤ','ⴥ',\n        '⴦','ⴧ','⴨','⴩','⴪',\n        '⴫', '⴬', 'ⴭ', '⴮', '⴯',\n    ],\n\n    // Collection of letters from all around the world that resemble Mkhedruli\n    homoglyph : [\n        'ⴢ','ձ','ଌ','ᕦ','၅','ᧆ','୫','ᦎ','\\u200Eᦵ','૩','ⴝ',\n        'ⴋ','চ','ᦂ','Ჴ','ળ','ᦝ','ᒑ','கு','᧗','ᦀ','ⴕ',\n        'ⴜ','ᧇ','𑇤','ⴌ','ઉ','ᑻ','წ','ჭ','ᕹ','ⴟ','Ჱ',\n        '','','','','',\n        '','','','','',\n        '','','','','',\n    ],\n\n    // Zalgo crazy text using diacritics\n    // zalgo : [],\n    \n    // International Phonetic Association (IPA) \n    phonetic : [\n        \"ɑ\",\"b\",\"g\",\"d\",\"ɛ\",\"v\",\"z\",\"tʰ\",\"i\",\"k'\",\"l\",\n        \"m\",\"n\",\"ɔ\",\"p'\",\"ʒ\",\"r\",\"s\",\"t'\",\"u\",\"pʰ\",\"kʰ\",\n        \"ʁ\",\"q'\",\"ʃ\",\"t͡ʃ\",\"t͡s\",\"d͡z\",\"t͡sʼ'\",\"t͡ʃʼ\",\"χ\",\"d͡ʒ\",\"h\",\n        \"eɪ\",\"j\",\"w\",\"qʰ\",\"oː\",\n        \"f\",\"ə\",\"ʔ\",\"ɢ\",\"ʕ\",\n        \"\",\"◌̃\",\"ə\",\"\",\"\",\n    ],\n\n    // Commonly adopted romanization as seen on social media\n    common : [\n        \"a\",\"b\",\"g\",\"d\",\"e\",\"v\",\"z\",\"t\",\"i\",\"k\",\"l\",\n        \"m\",\"n\",\"o\",\"p\",\"zh\",\"r\",\"s\",\"t\",\"u\",\"f\",\"q\",\n        \"gh\",\"y\",\"sh\",\"ch\",\"c\",\"dz\",\"ts\",\"tch\",\"x\",\"j\",\"h\",\n        \"e\",\"i\",\"ui\",\"x\",\"hoi\",\n        \"f\",\"oa\",\"h\",\"gh\",\"rgh\",\n        \"\",\"\",\"oa\",\"\",\"\",\n    ],\n\n    // Georgian alphabet cyrillization \n    cyrillic : [\n        \"а\",\"б\",\"г\",\"д\",\"е\",\"в\",\"з\",\"т\",\"и\",\"к\",\"л\",\n        \"м\",\"н\",\"о\",\"п\",\"ж\",\"р\",\"с\",\"т\",\"у\",\"ф\",\"к\",\n        \"г\",\"к\",\"ш\",\"ч\",\"ц\",\"дз\",\"тц\",\"тч\",\"х\",\"дж\",\"х\",\n        \"е\",\"й\",\"уй\",\"х\",\"хо\",\n        \"ф\",\"оа\",\"х\",\"г\",\"рг\",\n        \"\",\"\",\"оа\",\"\",\"\",\n    ],\n\n    // Georgian alphabet hellenization \n    greek : [\n        'α','μπ','γγ','ντ','ε','β','ζ','τ','η','κ','λ',\n        'μ','ν','ο','π','ζͱ','ρ','σ','τ','ου','ψ','κ',\n        'γ','κͱ','σͱ','τσ','τσ','δζ','τσ','τσͱ','γχ','τζ','ͱ',\n        'ε','ι','υι','κχ','ͱοι',\n        'φ','οα','ͱ','γ','ργ',\n        '','','οα','',''\n    ],\n\n    // Georgian alphabet armenianization \n    armenian : [\n        'ա','բ','գ','դ','է','վ','զ','թ','ի','կ','լ',\n        'մ','ն','օ','պ','ժ','ռ','ս','տ','ու','փ','ք',\n        'ղ','կհ','շ','չ','ց','ձ','ծ','ճ','խ','ջ','հ',\n        'է','ի','ուի','խ','հօի',\n        'ֆ','ը','հ','ղ','ռղ',\n        '','','ը','','',\n    ],\n\n    // International Standards Organization (http://www.iso.ch) as shown in Apridonidze et al. and UNGEGN\n    iso_9984 : [\n        \"a\",\"b\",\"g\",\"d\",\"e\",\"v\",\"z\",\"t'\",\"i\",\"k\",\"l\",\n        \"m\",\"n\",\"o\",\"p\",\"ž\",\"r\",\"s\",\"t\",\"u\",\"p'\",\"k'\",\n        \"ḡ\",\"q\",\"š\",\"č'\",\"c'\",\"j\",\"c\",\"č\",\"x\",\"ǰ\",\"h\",\n        \"ē\",\"y\",\"w\",\"ẖ'\",\"ō\",\n        \"f\",\"\",\"\",\"\",\"\",\n        \"\",\"\",\"\",\"\",\"\",\n    ],\n\n    //  The national system of romanization adopted in February 2002 by the State Department of Geodesy and Cartography of Georgia and the Institute of Linguistics, Georgian Academy of Sciences\n    national : [\n        \"a\",\"b\",\"g\",\"d\",\"e\",\"v\",\"z\",\"t\",\"i\",\"k'\",\"l\",\n        \"m\",\"n\",\"o\",\"p'\",\"zh\",\"r\",\"s\",\"t'\",\"u\",\"p\",\"k\",\n        \"gh\",\"q'\",\"sh\",\"ch\",\"ts\",\"dz\",\"ts'\",\"ch'\",\"kh\",\"j\",\"h\",\n        \"\",\"\",\"\",\"\",\"\",\n        \"\",\"\",\"\",\"\",\"\",\n        \"\",\"\",\"\",\"\",\"\",\n    ],\n\n    // Iberiul-K’avk’asiuri enatmetsnierebis ts’elits’deuli [Annual of Ibero-Caucasian Linguistics] as shown in The World’s Writing Systems. Variant forms separated with a slash\n    // ike : [],\n\n    // American Library Association/Library of Congress.\n    // ala_lc : [],\n\n\n    // Kohanimeandmebaas (Place Names Database) of Eesti Keele Instituut (Institute of the Es\u0002tonian Language) (http://www.eki.ee).\n    // knab : [],\n\n    // United States Board on Geographic Names and the Permanent Committee on Geographical Names for British Official Use\n    bgn : [\n        \"a\",\"b\",\"g\",\"d\",\"e\",\"v\",\"z\",\"t'\",\"i\",\"k\",\"l\",\n        \"m\",\"n\",\"o\",\"p\",\"zh\",\"r\",\"s\",\"t\",\"u\",\"p'\",\"k'\",\n        \"gh\",\"q\",\"sh\",\"ch'\",\"ts'\",\"dz\",\"ts\",\"ch\",\"kh\",\"j\",\"h\",\n        \"ey\",\"j\",\"\",\"q'\",\"\",\n        \"\",\"\",\"\",\"\",\"\",\n        \"\",\"\",\"\",\"\",\"\",\n    ],\n\n    // Thesaurus Indogermanischer Text- und Sprachmaterialien (http://titus.uni-frankfurt.de)\n    // titus : []\n\n    // Latin to Georgian QWERTY keyboard mapping used for older fonts\n    qwerty : [\n        \"a\",\"b\",\"g\",\"d\",\"e\",\"v\",\"z\",\"T\",\"i\",\"k\",\"l\",\n        \"m\",\"n\",\"o\",\"p\",\"J\",\"r\",\"s\",\"t\",\"u\",\"f\",\"q\",\n        \"R\",\"y\",\"S\",\"C\",\"c\",\"Z\",\"w\",\"W\",\"x\",\"j\",\"h\",\n        \"E\",\"I\",\"V\",\"X\",\"H\",\n        \"F\",\"D\",\"Y\",\"G\",\"L\",\n        \">\",\"N\",\"<\",\"{\",\"}\",\n    ],\n\n    // Numeric values\n    numeric : [\n        \"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"9\",\"10\",\"20\",\"30\",\n        \"40\",\"50\",\"70\",\"80\",\"90\",\"100\",\"200\",\"300\",\"400\",\"500\",\"600\",\n        \"700\",\"800\",\"900\",\"1000\",\"2000\",\"3000\",\"4000\",\"5000\",\"6000\",\"8000\",\"9000\",\n        \"8\",\"60\",\"400\",\"7000\",\"10000\",\n        \"\",\"\",\"\",\"\",\"\",\n        \"\",\"\",\"\",\"\",\"\",\n    ],\n\n    // See also http://transliteration.eki.ee/pdf/Georgian.pdf\n}\n\ndata.start = {\n    mkhedruli: 4304,\n    mtavruli: 7312,\n    asomtavruli: 4256,\n    nuskhuri: 11520,\n    latin: 97\n}\n\ndata.regex = {\n    mkhedruli: /[ა-ჰ]/,\n    mtavruli: /[Ა-Ჰ]/,\n    asomtavruli: /[Ⴀ-Ⴠ]/,\n    nuskhuri: /[ⴀ-ⴠ]/,\n    latin: /[a-zA-Z]/,\n    cyrillic: /[А-Яа-я]/\n}\n\n/* Frequencies for (for Vefxistyaosani)\n- words - 40989\n- dot - 1878\n- comma - 8479\n- exclamation - 588\n- question - 286\n*/\ndata.frequency = {\n    general : {\n        '.' : 0.0458171705,\n        ',' : 0.206860377,\n        '!' : 0.0143453122,\n        '?': 0.00697748176,\n    },\n\n    summed : [\n        ['?', 0.00697748176],\n        ['!', 0.02132279396],\n        ['.', 0.06713996445],\n        [',', 0.27400034145]\n    ]\n}\n\n// 100 random words generated using char-rnn \ndata.vefxwords = [\n    'გამიშვშეს',\n    'მართალიპი',\n    'შემომოცივე',\n    'ვუხვა',\n    'გავლსობა',\n    'განდევანგაა',\n    'მოასეხეს',\n    'აქამდსაგებენ',\n    'შვენინე',\n    'უგანდეგო',\n    'ქანულკულნი',\n    'გემრუფენ',\n    'ვეღათ',\n    'მივისცა',\n    'მუკამდის',\n    'მივიმოწუქალსა',\n    'მზლოს',\n    'მოვლეხვე',\n    'ვიმაქებდა',\n    'ტატრესტინი',\n    'მოითქოკა',\n    'მდაგებენ',\n    'ვიმცე',\n    'სევა',\n    'სათინესნი',\n    'სადგმო',\n    'გასჩვადეთ',\n    'მესმანცა',\n    'მივსცავე',\n    'წეითო',\n    'ძვილნი',\n    'გამიზრიან',\n    'დავათქვენო',\n    'ზიცი',\n    'მისცედი',\n    'მონებანი',\n    'დანამრისა',\n    'სრცოტი',\n    'ჰქონთავისთან',\n    'მბრძენია',\n    'წახსილთა',\n    'მიხსენით',\n    'სევნა',\n    'გარდუკვრიდდა',\n    'მიდამოდეს',\n    'სიპყრო',\n    'შემწოვლისა',\n    'მამდიჰხლეან',\n    'ბრჭნია',\n    'დანენატანნი',\n    'უკრთებოდემნი',\n    'იციცოდა',\n    'სამატა',\n    'უფრნა',\n    'გაეგარნების',\n    'დავეჯარენა',\n    'მტემურსა',\n    'მშვენოდენო',\n    'გიმძიმნო',\n    'სამვზინო',\n    'მოვლოცთა',\n    'გიშვილა',\n    'დაამჭებინ',\n    'მითხროს',\n    'მჟავალია',\n    'მღურა',\n    'ღინდეს',\n    'მოაგხება',\n    'გავიცეცხლი',\n    'ტირსლით',\n    'გავწყრეტა',\n    'მყივნენ',\n    'ქაფინს',\n    'ბანგსა',\n    'შემოხანა',\n    'შემოვსჭვრეტით',\n    'ამოვჰღერთო',\n    'მოცადია',\n    'მოეხვიდეს',\n    'თქმია',\n    'აღვია',\n    'ვლამს',\n    'მოხდიანები',\n    'გორსვლითა',\n    'გვთქვას',\n    'გაუზადა',\n    'დაბითქის',\n    'ანვინა',\n    'შრიდონი',\n    'გავწიდნია',\n    'ალვითანი',\n    'მონიო',\n    'სიტირენ',\n    'გიშიხარნი',\n    'დამიფემი',\n    'მეგრეცა',\n    'ფითჯი',\n    'მსდევარსა',\n    'განაზანდა',\n    'საქმინ',\n]\n\ndata.fnames = [\n    'თავან',\n    'ელიკონ',\n    'კანტლიონ',\n    'გველე',\n    'ლადიან',\n    'ლოტინე',\n    'გიოლგვი',\n    'გარსა',\n    'თედა',\n    'მეზნან',\n    'მარტა',\n    'აურაზგრ',\n    'მადრა',\n    'გიოგილი',\n    'სონიკელიზანი',\n    'ასსანო',\n    'ნიგოლიტი',\n    'ავაკვან',\n    'მონს',\n    'ნადრინ',\n    'ნიფოლ',\n    'ელიკორ',\n    'დამას',\n    'გიმრი',\n    'ობარხი',\n    'გამონ',\n    'ონეს',\n    'ზიხტინე',\n    'იოკელ',\n    'სატდა',\n    'პარა',\n    'იანეზ',\n    'ზინა',\n    'რანგი',\n    'იანგორ',\n    'აბსინე',\n    'ლენტან',\n    'ზისტიკობ',\n    'ნიგოლო',\n    'დატითნი',\n    'მანთა',\n    'არგიქ',\n    'ზიკო',\n    'ერლე',\n    'იანე',\n    'მევრენ',\n    'ალტისა',\n    'მარდია',\n    'სისელ',\n    'ხეისა',\n    'ელუან',\n    'დელო',\n    'იეკლებ',\n    'გუჩილი',\n    'ტამა',\n    'ნოკგოლ',\n    'იაკისე',\n    'დადო',\n    'ართემრას',\n    'ანაიკობე',\n    'გტიტ',\n    'თახსან',\n    'ზანა',\n    'ნუდო',\n    'გიოდა',\n    'ისსლიკონ',\n    'ალსან',\n    'რამოლე',\n    'გუმან',\n    'ნურმგინ',\n    'თომითანი',\n    'დევანე',\n    'ელედეინ',\n    'გიმოტ',\n    'არარ',\n    'ორმონ',\n    'ნედრი',\n    'დიმო',\n    'ხოთიანეი',\n    'გივა',\n    'ნანტრე',\n    'გიმოლ',\n    'დოსონ',\n    'იკანენ',\n    'იკქორიზე',\n    'გილტორგ',\n    'დეტონ',\n    'ერდეა',\n    'ირეგლიზ',\n    'რიდელუდან',\n    'თოკან',\n    'იანებენტიანა',\n    'სიბო',\n    'გიორტინ',\n    'ნიკილან',\n    'ელაკონ',\n    'გიდრაბ',\n    'ლეცთეტანტენდერიბ',\n    'დამერ',\n    'იეგო',\n]\n\ndata.lnames = [\n    'მახადენია',\n    'ბსელრია',\n    'ქავია',\n    'კორეკია',\n    'მარდია',\n    'ბარდიონია',\n    'გვიპიანდია',\n    'ერთელია',\n    'ნთხაია',\n    'თედია',\n    'ბოხაია',\n    'ბარია',\n    'ჭარტინია',\n    'არპანია',\n    'ჩურია',\n    'მორცაწაზია',\n    'არმელია',\n    'მირბარია',\n    'ჭველაქია',\n    'ქარითია',\n    'გართელია',\n    'იანია',\n    'დვანტონეიანია',\n    'პუჩია',\n    'დატილია',\n    'კანია',\n    'ვარდსვალია',\n    'ყორთელია',\n    'არდოლია',\n    'რიკსქაშვილი',\n    'გამექონთეშვილი',\n    'ლუჩაშვილი',\n    'მარდაშვილი',\n    'პაბიშვილი',\n    'არბერეშვილი',\n    'ფოსურიშვილი',\n    'ვაწოშვილი',\n    'ჩრილიაშვილი',\n    'ტიმაშვილი',\n    'მავანიშვილი',\n    'მადსიშვილი',\n    'რედელიშვილი',\n    'თეთაშვილი',\n    'გარავაშვილი',\n    'დარახაშვილი',\n    'ბარჭამიშვილი',\n    'ბარახაშვილი',\n    'ანღელიშვილი',\n    'მებაშვილი',\n    'სურეჯიშვილი',\n    'აკბთაკიშვილი',\n    'ტუსონიშვილი',\n    'ტოდერაშვილი',\n    'ზაბხასიშვილი',\n    'ქურაბერინიშვილი',\n    'ებვეკაშვილი',\n    'ერდითაშვილი',\n    'ურბელიშვილი',\n    'მენრმაშვილი',\n    'ჯვილოძე',\n    'ბადიაძე',\n    'შვირიძე',\n    'სასანაძე',\n    'გიმაანიძე',\n    'გვამავიძე',\n    'არმემიძსძე',\n    'ბარაძე',\n    'აბეანიძე',\n    'ოვონიძე',\n    'ლამაშვიძე',\n    'ობთახურაძე',\n    'კერეძე',\n    'ფვერიძე',\n    'მაგიძე',\n    'კადიაშიძე',\n    'გამსანიძე',\n    'მერტინიძე',\n    'ბემეელიძე',\n    'ტოხიძე',\n    'ჭარატიძე',\n    'ბადოსელი',\n    'ვარისელი',\n    'სირხელი',\n    'სორხელი',\n    'მარდელი',\n    'გაშვითელი',\n    'კოთაველი',\n    'ოსთმინელი',\n    'ერისელი',\n    'ზთერტელი',\n    'ხამიკელი',\n    'მიბაძეშიელი',\n    'იკთელი',\n    'გთციტაბელი',\n    'ასიცელი',\n    'ობაიჭელი',\n    'ლენთელი',\n    'მემჩათერინონგბანინიძე',\n    'ამედვაქსიკოგეიშვირი',\n    'მორჟვონანდიშვილი',\n]\n\nexport default data","import data from \"./data.mjs\";\n\nexport const checkForAliases = (dir) => {\n    var aliases = {\n        მხედრული: \"mkhedruli\",\n        ასომთავრული: \"asomtavruli\",\n        ნუსხური: \"nuskhuri\",\n        მთავრული: \"mtavruli\",\n        ხუცური: \"khutsuri\",\n        შანიძისეული: \"shanidziseuli\",\n        ტფილელისეული: \"tfileliseuli\",\n        ჰომოგლიფი: \"homoglyph\",\n        ფონეტიკური: \"phonetic\",\n        ლათინური: \"qwerty\",\n        კირილიცა: \"cyrillic\",\n        ბერძნული: \"greek\",\n        სომხური: \"armenian\",\n        ნაციონალური: \"national\",\n        ქვერთი: \"qwerty\",\n        ზოგადი: \"common\",\n        ტრანსკრიფცია: \"common\",\n        ისო: \"iso_9984\",\n        ბგნ: \"bgn\",\n    };\n\n    Object.keys(aliases).forEach(function (key) {\n        if (key == dir.from) {\n            dir.from = aliases[key];\n        }\n        if (key == dir.to) {\n            dir.to = aliases[key];\n        }\n    });\n};\n\nexport const checkForDirection = (dir) => {\n    let permitted_from = [\n        \"mkhedruli\",\n        \"asomtavruli\",\n        \"nuskhuri\",\n        \"mtavruli\",\n        \"qwerty\",\n    ];\n    let permitted_to = [\n    //    everything is permitted\n    ];\n    if (permitted_from.indexOf(dir.from) == -1)\n        throw `Text conversion from '${dir.from}' is not supported.`;\n    // if (permitted_to.indexOf(dir.to) == -1)\n    //     throw `Text conversion to '${dir.to}' is not supported.`;\n};\n\nexport const isUnsupported = (str) => {\n    return [data.regex.cyrillic.test(str)].some(\n        (testResult) => testResult == true\n    );\n};\n\nexport const isBicameral = (to) => {\n    return to == \"tfileliseuli\" || to == \"shanidziseuli\" || to == \"khutsuri\";\n};\n\nString.prototype.setCharAt = function (where, what, offset) {\n    offset = offset || 0;\n    if (where > this.length - 1) return this;\n    return (\n        this.substr(0, where) + what + this.substr(where + what.length + offset)\n    );\n};\n\nexport const toUpperCase = (word, from, to) => {\n    let char = data.alphabets[to][data.alphabets[from].indexOf(word[0])];\n    char = char == undefined ? word[0] : char;\n    return word.setCharAt(0, char);\n};\n\nexport const detectAlphabet = (str, idx) => {\n    if (idx < 0)\n        return \"qwerty\"\n    if (data.regex.mkhedruli.test(str[idx]))\n        return \"mkhedruli\";\n    if (data.regex.latin.test(str[idx]))\n        return \"qwerty\";\n    if (data.regex.asomtavruli.test(str[idx]))\n        return \"asomtavruli\";\n    if (data.regex.mtavruli.test(str[idx]))\n        return \"mtavruli\";\n    if (data.regex.nuskhuri.test(str[idx]))\n        return \"nuskhuri\";\n    return detectAlphabet(str, idx-1);\n};\n\nexport const classifyText = (str) => {\n    /* MATCHES ALPHABETS [Mkhedruli, Mtavruli, Asomtavruli, Nuskhuri, Latin, Cyrillic] */\n    let vector = [\n        data.regex.mkhedruli.test(str),\n        data.regex.mtavruli.test(str),\n        data.regex.asomtavruli.test(str),\n        data.regex.nuskhuri.test(str),\n        data.regex.latin.test(str),\n        data.regex.cyrillic.test(str),\n    ];\n\n    // Georgian alphabets\n    if (isSame(vector, [true, false, false, false, false, false]))\n        return \"mkhedruli\";\n\n    if (isSame(vector, [false, true, false, false, false, false]))\n        return \"mtavruli\";\n\n    if (isSame(vector, [false, false, true, false, false, false]))\n        return \"asomtavruli\";\n\n    if (isSame(vector, [false, false, false, true, false, false]))\n        return \"nuskhuri\";\n\n    // Georgian bicameral writings\n    if (isSame(vector, [true, true, false, false, false, false]))\n        return \"tfileliseuli\";\n\n    if (isSame(vector, [true, false, true, false, false, false]))\n        return \"shanidziseuli\";\n\n    if (isSame(vector, [false, false, true, true, false, false]))\n        return \"khutsuri\";\n\n    // Non-Georgian alphabets\n    if (isSame(vector, [false, false, false, false, true, false]))\n        return \"latin\";\n\n    if (isSame(vector, [false, false, false, false, false, true]))\n        return \"cyrillic\";\n\n    return vector;\n};\n\n// Char Code At\nexport const cca = (char) => char.charCodeAt(0);\n\n// From Char Code\nexport const fcc = (code) => String.fromCharCode(code);\n\n// same length [Boolean] equals\nexport const isSame = (b1, b2) => {\n    for (let i = 0, len = b1.length; i < len; i++) {\n        if (b1[i] != b2[i]) return false;\n    }\n    return true;\n};\n\nexport default {checkForAliases, checkForDirection, isUnsupported, isBicameral, toUpperCase, detectAlphabet, classifyText, cca, fcc, isSame};\n","import data from \"./data.mjs\";\nimport {checkForAliases, classifyText, checkForDirection, isBicameral, toUpperCase, detectAlphabet} from \"./utils.mjs\";\n\n\nconst convert = (str, from, to) => {\n    let dir = {from, to}\n    checkForAliases(dir)\n    checkForDirection(dir)\n    return safeConvert(str, dir.from, dir.to)\n}\n\nconst interpret = (str, to) => {\n    let dir = {to}\n    checkForAliases(dir)\n    if (str != null)\n        if (isBicameral(dir.to))\n            return convertBicameral(str, detectAlphabet(str, str.length-1), dir.to);\n        else \n            return convertUnicameral(str, detectAlphabet(str, str.length-1), dir.to);\n}\n\nconst convertUnicameral = (str, from, to) => {\n    let converted = \"\";\n    for (let i = 0, len = str.length; i < len; i++)\n    {\n        let key = data.alphabets[to][data.alphabets[from].indexOf(str[i])];\n        converted += key===undefined?str[i]:key;\n    }\n    return converted;\n}\n\nconst convertBicameral = (str, from, to) =>\n{\n    const rules = {\n        \"tfileliseuli\": {\n            upper : \"mtavruli\",\n            lower : \"mkhedruli\"\n        },\n\n        \"shanidziseuli\": {\n            upper : \"asomtavruli\",\n            lower : \"mkhedruli\"\n        },\n\n        \"khutsuri\": {\n            upper : \"asomtavruli\",\n            lower : \"nuskhuri\"\n        }\n    }\n\n    let upperScript = rules[to].upper;\n    let lowerScript = rules[to].lower;\n\n    let converted = \"\";\n    for (let i = 0, len = str.length; i < len; i++)\n    {\n        let key = data.alphabets[lowerScript][data.alphabets[from].indexOf(str[i])];\n        converted += key===undefined?str[i]:key;\n    }\n    \n    // First Letter\n    converted = toUpperCase(converted, lowerScript, upperScript);\n\n\n    let matched = converted.match(/[?.!]\\s+[A-zႠ-ჰⴀ-ⴠ0-9]/g);\n    if (matched != null)\n    for(let i = 0; i < matched.length; i++)\n    {\t\n        converted = converted.setCharAt(converted.indexOf(matched[i]), matched[i].substr(0,matched[i].length-1).concat(toUpperCase(matched[i][matched[i].length-1], lowerScript, upperScript)));\n    }\n\n\n    matched = converted.match(/[Ⴀ-ჰⴀ-ⴠ]\\'/g);\n    if (matched != null)\n    for(let i = 0; i < matched.length; i++)\n    {\t\n        converted = converted.setCharAt(converted.indexOf(matched[i]), toUpperCase(matched[i][0], lowerScript, upperScript), 1);\n    }\n    \n    return converted;\n}\n\nconst safeConvert = (str, from, to) => \n{\n    if (str != null)\n        if (!isBicameral(to))\n            return convertUnicameral(str, from, to);\n        else\n            return convertBicameral(str, from, to);\n}\n\nexport {convert, interpret, convertUnicameral, convertBicameral, safeConvert}\n\nexport default {\n    convert, \n    interpret, \n    $:classifyText\n};","import data from \"./data.mjs\"\n\nconst freqs = data.frequency.summed\nvar dataset = data.vefxwords\n\nconst loadWordlist = (wordlist) => \n{\n    dataset = wordlist\n}\n\nconst sentences = (nwords) => {\n    return createSentences(createWords(nwords))\n} \n\nconst paragraphs = (nwords, npar, newline=\"\\n\\n\") => {\n    let paragraphs = \"\"\n\n    for (let i=0; i < npar; i++){\n        paragraphs += createSentences(createWords(nwords)) + newline\n    }\n\n    return paragraphs\n}\n\nconst createSentences = (words) => {\n    let sentences = \"\"\n    \n    for (let i=0; i < words.length; i++){\n        sentences += words[i] + randomMark()\n    }\n    sentences = sentences.trim()\n    sentences = sentences.setCharAt(sentences.length-1, '.', 1)   \n    return sentences\n}\n\n\nconst names = (nnames) => {\n    let results = []\n    for (let i = 0; i < nnames; i++) {\n        results.push(randomFirstName() + ' ' + randomLastName())\n    }\n    return results\n}\n\nconst randomFirstName = () => {\n    return data.fnames[randomNumber(0, data.fnames.length)]\n}\n\nconst randomLastName = () => {\n    return data.lnames[randomNumber(0, data.lnames.length)]\n}\n\n\nString.prototype.setCharAt = function(where, what, offset) \n{\n    offset = offset || 0;\n    if(where > this.length-1) return this;\n    return this.substr(0,where) + what + this.substr(where+what.length+offset);\n}\n\nconst randomMark = () => {\n    let r = Math.random()\n    for (let i=0; i<freqs.length; i++) {\n        if (r < freqs[i][1])\n            return freqs[i][0] + ' '\n    }\n    return ' '\n}\n\nconst randomWord = () => {\n    return dataset[randomNumber(0,dataset.length)]\n}\n\nconst createWords = (nwords) => {\n    let words = []\n    for (let i=0; i < nwords; i++){\n        words.push(randomWord())\n    }\n    return words\n\n}\n\n// Random number [min, max)\nconst randomNumber = (min, max) => {\n    return Math.floor(Math.random() * (max-min) + min)\n}\n\nconst $ = { randomFirstName, randomLastName, randomWord };\n\nexport default {\n    sentences, paragraphs, loadWordlist, names, $\n};","const frequency = (text, miss=\"[ა-ჰᲐ-ᲰႠ-Ⴠⴀ-ⴠa-zA-ZА-Яа-я]\") => {\n    let splitted = text.toUpperCase().split('')\n    let length = splitted.length\n    let table = {}\n    let r = new RegExp(miss)\n    for (let i=0; i < length; i++) {\n        if (!r.test(splitted[i]))\n            continue\n        if (!table[splitted[i]])\n            table[splitted[i]] = 1\n        else \n            table[splitted[i]]++\n    }\n\n    for(let key in table) {\n        table[key] /= length\n    }\n\n    return table\n}\n\nconst count = (text, miss=\"[ა-ჰᲐ-ᲰႠ-Ⴠⴀ-ⴠa-zA-ZА-Яа-я]\") => {\n    let splitted = text.toUpperCase().split('')\n    let length = splitted.length\n    let table = {}\n    let r = new RegExp(miss)\n    for (let i=0; i < length; i++) {\n        if (!r.test(splitted[i]))\n            continue\n        if (!table[splitted[i]])\n            table[splitted[i]] = 1\n        else \n            table[splitted[i]]++\n    }\n\n    return table\n}\n\nconst friedman = (text, miss=\"[ა-ჰᲐ-ᲰႠ-Ⴠⴀ-ⴠa-zA-ZА-Яа-я]\") => {\n    let table = count(text, miss)\n    let sum = 0\n    let total = 0\n    for (let key in table){\n        sum += table[key] * (table[key] - 1)\n        total += table[key]\n    }\n    return total > 1 ? sum / (total*(total-1)) : 0\n}\n\n\nexport default {friedman, frequency, count};","import core from \"./lib/core.mjs\";\nimport lorem from \"./lib/lorem.mjs\";\nimport toolkit from \"./lib/toolkit.mjs\";\nimport data from \"./lib/data.mjs\";\nimport utils from \"./lib/utils.mjs\";\n\ncore.$ = {classifyText : utils.classifyText}\nlet scripts = Object.keys(data.alphabets).slice(0,4)\n    .concat([\"khutsuri\", \"shanidziseuli\", \"tfileliseuli\"])\n    .concat(Object.keys(data.alphabets).slice(4));\n\n// Abstract anbani\nconst anbani = {\n    core, lorem, toolkit,\n    data : {\n        ab : {\n            mkhedruli: data.alphabets.mkhedruli.join(''),\n            asomtavruli: data.alphabets.asomtavruli.join(''),\n            nuskhuri: data.alphabets.nuskhuri.join(''),\n            mtavruli: data.alphabets.mtavruli.join(''),\n        },\n\n        keys : scripts,\n\n        lorem : {\n            firstNames : data.fnames,\n            lastNames : data.lnames,\n            words : data.vefxwords\n        }\n    },\n};\n\n\nexport {core, lorem, toolkit, data}\nexport default anbani\n","import anbani from \"anbani\";\n\nvar inputArea, debugEl;\n\nfunction debugMsg(msg) {\n    debugEl.innerHTML = msg + (msg.length > 50 ? \"...\" : \"\")\n}\n\nString.prototype.toElement = function () {\n    var template = document.createElement(\"template\");\n    var html = this.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = html;\n    return template.content.firstChild;\n};\n\nfunction inputListener() {\n    let inputText = \"გამარჯობა\"\n    if (inputArea.value != \"\")\n        inputText = inputArea.value\n\n    let scripts = anbani.data.keys;\n    let georgian = anbani.core.interpret(\n        inputText,\n        \"mkhedruli\"\n    );\n\n    scripts.forEach((script) => {\n        document.querySelector(`#${script}Btn`).innerHTML = anbani.core.convert(\n            georgian,\n            \"mkhedruli\",\n            script\n        );\n    });\n}\n\nfunction copyWithAPI(e) {\n    let content = e.target.innerHTML;\n\n    navigator.clipboard.writeText(content).catch(e => {\n        console.log('ასე ვერ გავფრინდებით', e);\n    })\n\n}\n\nfunction copyWithExec(e) {\n    let content = e.target.innerHTML\n    const area = document.createElement('textarea');\n    document.body.appendChild(area);\n    area.value = content;\n    area.select();\n    document.execCommand('copy');\n    document.body.removeChild(area);\n}\n\nfunction copy(e) {\n    if (navigator.clipboard) copyWithExec(e)\n    else copyWithExec(e)\n    debugMsg(\"ტექსტი კოპირებულია ჻ \" + e.target.innerHTML.slice(0,30))\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", (event) => {\n\n    window.copy = copy\n\n    inputArea = document.querySelector(\"#inputArea\");\n    debugEl = document.querySelector(\"#debug\");\n    inputArea.addEventListener(\"input\", inputListener)\n});"],"names":["$3e9bc01057bd0173$var$data","mkhedruli","mtavruli","asomtavruli","nuskhuri","homoglyph","phonetic","common","cyrillic","greek","armenian","iso_9984","national","bgn","qwerty","numeric","latin","general","summed","$3e9bc01057bd0173$export$2e2bcd8739ae039","$73d84fd692897d3f$export$b90e0603966ac6a0","dir","aliases","Object","keys","forEach","key","from","to","$73d84fd692897d3f$export$b0f773ea32aeb296","indexOf","$73d84fd692897d3f$export$40b880626ad803ac","String","prototype","setCharAt","where","what","offset","this","length","substr","$73d84fd692897d3f$export$d80c591a9e16646","word","char","alphabets","undefined","$73d84fd692897d3f$export$6ee99fcdec9a113e","str","idx","regex","test","$73d84fd692897d3f$export$a43a4096c689c3b0","vector","$73d84fd692897d3f$export$18ac18efd9e98d41","b1","b2","i","len","$73d84fd692897d3f$export$2e2bcd8739ae039","some","testResult","charCodeAt","code","fromCharCode","$4ed1272c4434e7b1$export$baad8515b31b26e5","converted","$4ed1272c4434e7b1$export$17d8eddb2796154a","rules","tfileliseuli","upper","lower","shanidziseuli","khutsuri","upperScript","lowerScript","matched","match","i1","concat","i2","$4ed1272c4434e7b1$export$2187bb99d29a0da7","$4ed1272c4434e7b1$export$2e2bcd8739ae039","$","$ff485c353e46f3e7$var$freqs","frequency","$ff485c353e46f3e7$var$dataset","vefxwords","$ff485c353e46f3e7$var$createSentences","words","sentences","$ff485c353e46f3e7$var$randomMark","trim","$ff485c353e46f3e7$var$randomFirstName","fnames","$ff485c353e46f3e7$var$randomNumber","$ff485c353e46f3e7$var$randomLastName","lnames","r","Math","random","$ff485c353e46f3e7$var$randomWord","$ff485c353e46f3e7$var$createWords","nwords","push","min","max","floor","$ff485c353e46f3e7$export$2e2bcd8739ae039","npar","newline","paragraphs","wordlist","nnames","results","$27befceefb8d5cd4$var$count","text","miss","splitted","toUpperCase","split","table","RegExp","$27befceefb8d5cd4$export$2e2bcd8739ae039","sum","total","classifyText","$9d916b7786f6e1be$var$scripts","slice","$c8eaf4acd6fbca2f$var$inputArea","$c8eaf4acd6fbca2f$var$debugEl","$9d916b7786f6e1be$export$2e2bcd8739ae039","data","ab","join","lorem","firstNames","lastNames","$c8eaf4acd6fbca2f$var$inputListener","inputText","value","scripts","georgian","core","interpret","script","document","querySelector","innerHTML","convert","$c8eaf4acd6fbca2f$var$copyWithExec","e","content","target","area","createElement","body","appendChild","select","execCommand","removeChild","$c8eaf4acd6fbca2f$var$copy","msg","navigator","clipboard","toElement","template","html","firstChild","window","addEventListener","event","copy"],"version":3,"file":"index.2e2f3993.js.map"}